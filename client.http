### RENDER CATEGORIES
GET http://localhost:3000/categories

### RENDER FEATURES
GET http://localhost:3000/features


### RENDER ALL PARKS LIST
GET http://localhost:3000/parks

### RENDER an individual park (that exists)
GET http://localhost:3000/parks/1

### RENDER an individual park (that DOESN'T exists)
GET http://localhost:3000/parks/99

### GET POSTS from USERS for a park.  
# Nb. HOW to isolate comments for a particular park
GET http://localhost:3000/parks/1/comments/

### ANOTHER COMMENT FOR ANOTHER PARK
GET http://localhost:3000/parks/3/comments/

### ANOTHER COMMENT FOR ANOTHER PARK
GET http://localhost:3000/parks/2/comments/

### GET A COMMENT FROM A PARK
GET http://localhost:3000/parks/1/comments/2

### TESTING COMMENTS
GET http://localhost:3000/posts



### LOGIN with correct details - no longer works: "email" replaced with "login"
# POST http://localhost:3000/auth/signin
# Content-Type: application/json

# {
#   "auth": {
#     "email": "alice@picvic.com.au",
#     "password": "Apicvic"
#   }
# }

# ### LOGIN with INCORRECT details - no longer works: "email" replaced with "login"
# POST http://localhost:3000/auth/signin
# Content-Type: application/json

# {
#   "auth": {
#     "email": "alice@picvic.com.au",
#     "password": "nottherightpassword"
#   }
# }

### REGISTERING a new user
# If this was sent again, request will fail with code 422
POST http://localhost:3000/auth/signup
Content-Type: application/json

{
  "email": "test@testing.com",
  "username": "test-user1",
  "password": "test-password1",
  "password_confirmation": "test-password1"
}

### ATTEMPTING to register new user with "@" in username
POST http://localhost:3000/auth/signup
Content-Type: application/json

{
  "email": "test1@testing.com",
  "username": "test@user1",
  "password": "test-password2",
  "password_confirmation": "test-password2"
}

### SIGN IN with EMAIL - updated
POST http://localhost:3000/auth/signin
Content-Type: application/json

{
  "auth": {
    "signin": "admin@picvic.com.au",
    "password": "adminPic"
  }
}

### SIGN IN with USERNAME - updated
POST http://localhost:3000/auth/signin
Content-Type: application/json

{
  "auth": {
    "signin": "admin",
    "password": "adminPic"
  }
}

### POST a comment without a JWT
POST http://localhost:3000/parks/1/comments
Content-Type: application/json

{ 
  "user_id": 1,
  "park_id": 1,
  "comment": "This will not comment",
  "rating": 5
}


### POST a comment with JWT
POST http://localhost:3000/parks/1/comments
Content-Type: application/json
Authorization: "Bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2NDE4NjIwNjh9.BRepsoDSTZ-x3ZmFCtp89jDLX0wh0Sh09JejXyBl_Pw"

{
  "user_id": 1,
  "park_id": 1,
  "comment": "This will comment on a park",
  "rating": 5
}

### POST a comment with JWT (again)
POST http://localhost:3000/parks/1/comments
Content-Type: application/json
Authorization: "Bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2NDE4MjM1NDd9.fGW01xxdjqbqKn8XDlyk1uaWx0R9y_8bXiM3rG3AGAo"

{
  "user_id": 1,
  "park_id": 1,
  "comment": "This will make a comment again!",
  "rating": 5
}



### POST a park request without a token
POST http://localhost:3000/parks
Content-Type: application/json

{
  "category_id": 1,
  "feature_id": 2,
  "address_id": 1,
  "name": "This park should not post",
  "cheese": "cheese we wont be able to eat",
  "wine": "red wine we can't drink",
  "latitude": -54.46675,
  "longitude": 27.00203
}

### POST with token and admin privilege
# NB: jwt will need to be updated each time after 1hr
# Association for user needed in order to create a Park
POST http://localhost:3000/parks
Content-Type: application/json
Authorization: "Bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2NDE4NjIyODN9.zDBaYy8tk-ZaYFTOrlJnOtSEnBLUY1EFXj4J7hpk0b8"

{
  "category_id": 1,
  "feature_id": 2,
  "address_id": 1,
  "name": "Test park",
  "cheese": "tasty cheese",
  "wine": "red wine",
  "latitude": -54.46675,
  "longitude": 27.00203
}


